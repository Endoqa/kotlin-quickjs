// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class JSMallocState(
    public val `$mem`: MemorySegment,
) {
    public var malloc_count: ULong
        get() = (malloc_countHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            malloc_countHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var malloc_size: ULong
        get() = (malloc_sizeHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            malloc_sizeHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var malloc_limit: ULong
        get() = (malloc_limitHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            malloc_limitHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var opaque: Pointer<Unit>
        get() = opaqueHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            opaqueHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_LONG.withName("malloc_count"),
            ValueLayout.JAVA_LONG.withName("malloc_size"),
            ValueLayout.JAVA_LONG.withName("malloc_limit"),
            `$RuntimeHelper`.POINTER.withName("opaque"),
        ).withName("JSMallocState")

        @JvmField
        public val malloc_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("malloc_count"))

        @JvmField
        public val malloc_sizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("malloc_size"))

        @JvmField
        public val malloc_limitHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("malloc_limit"))

        @JvmField
        public val opaqueHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("opaque"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSMallocState =
            JSMallocState(alloc.allocate(layout))
    }
}
