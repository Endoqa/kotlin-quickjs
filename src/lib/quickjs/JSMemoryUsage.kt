// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class JSMemoryUsage(
    public val `$mem`: MemorySegment,
) {
    public var malloc_size: int64_t
        get() = malloc_sizeHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            malloc_sizeHandle.set(this.`$mem`, 0L, value)
        }

    public var malloc_count: int64_t
        get() = malloc_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            malloc_countHandle.set(this.`$mem`, 0L, value)
        }

    public var memory_used_count: int64_t
        get() = memory_used_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            memory_used_countHandle.set(this.`$mem`, 0L, value)
        }

    public var atom_count: int64_t
        get() = atom_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            atom_countHandle.set(this.`$mem`, 0L, value)
        }

    public var str_count: int64_t
        get() = str_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            str_countHandle.set(this.`$mem`, 0L, value)
        }

    public var obj_count: int64_t
        get() = obj_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            obj_countHandle.set(this.`$mem`, 0L, value)
        }

    public var prop_count: int64_t
        get() = prop_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            prop_countHandle.set(this.`$mem`, 0L, value)
        }

    public var shape_count: int64_t
        get() = shape_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            shape_countHandle.set(this.`$mem`, 0L, value)
        }

    public var js_func_count: int64_t
        get() = js_func_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            js_func_countHandle.set(this.`$mem`, 0L, value)
        }

    public var js_func_pc2line_count: int64_t
        get() = js_func_pc2line_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            js_func_pc2line_countHandle.set(this.`$mem`, 0L, value)
        }

    public var c_func_count: int64_t
        get() = c_func_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            c_func_countHandle.set(this.`$mem`, 0L, value)
        }

    public var fast_array_count: int64_t
        get() = fast_array_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            fast_array_countHandle.set(this.`$mem`, 0L, value)
        }

    public var binary_object_count: int64_t
        get() = binary_object_countHandle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            binary_object_countHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_LONG.withName("malloc_size"),
            ValueLayout.JAVA_LONG.withName("malloc_count"),
            ValueLayout.JAVA_LONG.withName("memory_used_count"),
            ValueLayout.JAVA_LONG.withName("atom_count"),
            ValueLayout.JAVA_LONG.withName("str_count"),
            ValueLayout.JAVA_LONG.withName("obj_count"),
            ValueLayout.JAVA_LONG.withName("prop_count"),
            ValueLayout.JAVA_LONG.withName("shape_count"),
            ValueLayout.JAVA_LONG.withName("js_func_count"),
            ValueLayout.JAVA_LONG.withName("js_func_pc2line_count"),
            ValueLayout.JAVA_LONG.withName("c_func_count"),
            ValueLayout.JAVA_LONG.withName("fast_array_count"),
            ValueLayout.JAVA_LONG.withName("binary_object_count"),
        ).withName("JSMemoryUsage")

        @JvmField
        public val malloc_sizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("malloc_size"))

        @JvmField
        public val malloc_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("malloc_count"))

        @JvmField
        public val memory_used_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("memory_used_count"))

        @JvmField
        public val atom_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("atom_count"))

        @JvmField
        public val str_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("str_count"))

        @JvmField
        public val obj_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("obj_count"))

        @JvmField
        public val prop_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("prop_count"))

        @JvmField
        public val shape_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("shape_count"))

        @JvmField
        public val js_func_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("js_func_count"))

        @JvmField
        public val js_func_pc2line_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("js_func_pc2line_count"))

        @JvmField
        public val c_func_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("c_func_count"))

        @JvmField
        public val fast_array_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("fast_array_count"))

        @JvmField
        public val binary_object_countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("binary_object_count"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSMemoryUsage =
            JSMemoryUsage(alloc.allocate(layout))
    }
}
