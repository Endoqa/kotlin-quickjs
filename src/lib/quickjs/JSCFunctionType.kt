// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class JSCFunctionType(
    public val `$mem`: MemorySegment,
) {
    public var generic: Pointer<JSCFunction>
        get() = genericHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            genericHandle.set(this.`$mem`, 0L, value)
        }

    public var generic_magic: Pointer<(
        ctx: Pointer<JSContext>,
        this_val: JSValue,
        argc: Int,
        argv: Pointer<JSValue>,
        magic: Int,
    ) -> JSValue>
        get() = generic_magicHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            generic_magicHandle.set(this.`$mem`, 0L, value)
        }

    public var `constructor`: Pointer<JSCFunction>
        get() = constructorHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            constructorHandle.set(this.`$mem`, 0L, value)
        }

    public var constructor_magic: Pointer<(
        ctx: Pointer<JSContext>,
        new_target: JSValue,
        argc: Int,
        argv: Pointer<JSValue>,
        magic: Int,
    ) -> JSValue>
        get() = constructor_magicHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            constructor_magicHandle.set(this.`$mem`, 0L, value)
        }

    public var constructor_or_func: Pointer<JSCFunction>
        get() = constructor_or_funcHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            constructor_or_funcHandle.set(this.`$mem`, 0L, value)
        }

    public var f_f: Pointer<(`$p0`: Double) -> Double>
        get() = f_fHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            f_fHandle.set(this.`$mem`, 0L, value)
        }

    public var f_f_f: Pointer<(`$p0`: Double, `$p1`: Double) -> Double>
        get() = f_f_fHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            f_f_fHandle.set(this.`$mem`, 0L, value)
        }

    public var getter: Pointer<(ctx: Pointer<JSContext>, this_val: JSValue) -> JSValue>
        get() = getterHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            getterHandle.set(this.`$mem`, 0L, value)
        }

    public var setter: Pointer<(
        ctx: Pointer<JSContext>,
        this_val: JSValue,
        `val`: JSValue,
    ) -> JSValue>
        get() = setterHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            setterHandle.set(this.`$mem`, 0L, value)
        }

    public var getter_magic: Pointer<(
        ctx: Pointer<JSContext>,
        this_val: JSValue,
        magic: Int,
    ) -> JSValue>
        get() = getter_magicHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            getter_magicHandle.set(this.`$mem`, 0L, value)
        }

    public var setter_magic: Pointer<(
        ctx: Pointer<JSContext>,
        this_val: JSValue,
        `val`: JSValue,
        magic: Int,
    ) -> JSValue>
        get() = setter_magicHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            setter_magicHandle.set(this.`$mem`, 0L, value)
        }

    public var iterator_next: Pointer<(
        ctx: Pointer<JSContext>,
        this_val: JSValue,
        argc: Int,
        argv: Pointer<JSValue>,
        pdone: Pointer<Int>,
        magic: Int,
    ) -> JSValue>
        get() = iterator_nextHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            iterator_nextHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("generic"),
            `$RuntimeHelper`.POINTER.withName("generic_magic"),
            `$RuntimeHelper`.POINTER.withName("constructor"),
            `$RuntimeHelper`.POINTER.withName("constructor_magic"),
            `$RuntimeHelper`.POINTER.withName("constructor_or_func"),
            `$RuntimeHelper`.POINTER.withName("f_f"),
            `$RuntimeHelper`.POINTER.withName("f_f_f"),
            `$RuntimeHelper`.POINTER.withName("getter"),
            `$RuntimeHelper`.POINTER.withName("setter"),
            `$RuntimeHelper`.POINTER.withName("getter_magic"),
            `$RuntimeHelper`.POINTER.withName("setter_magic"),
            `$RuntimeHelper`.POINTER.withName("iterator_next"),
        ).withName("JSCFunctionType")

        @JvmField
        public val genericHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("generic"))

        @JvmField
        public val generic_magicHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("generic_magic"))

        @JvmField
        public val constructorHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("constructor"))

        @JvmField
        public val constructor_magicHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("constructor_magic"))

        @JvmField
        public val constructor_or_funcHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("constructor_or_func"))

        @JvmField
        public val f_fHandle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("f_f"))

        @JvmField
        public val f_f_fHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("f_f_f"))

        @JvmField
        public val getterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("getter"))

        @JvmField
        public val setterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("setter"))

        @JvmField
        public val getter_magicHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("getter_magic"))

        @JvmField
        public val setter_magicHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("setter_magic"))

        @JvmField
        public val iterator_nextHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("iterator_next"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSCFunctionType =
            JSCFunctionType(alloc.allocate(layout))

        public fun interface generic {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                argc: Int,
                argv: Pointer<JSValue>,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(generic::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface generic_magic {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                argc: Int,
                argv: Pointer<JSValue>,
                magic: Int,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(generic_magic::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface `constructor` {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                argc: Int,
                argv: Pointer<JSValue>,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(`constructor`::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface constructor_magic {
            public fun invoke(
                ctx: Pointer<JSContext>,
                new_target: JSValue,
                argc: Int,
                argv: Pointer<JSValue>,
                magic: Int,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(constructor_magic::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface constructor_or_func {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                argc: Int,
                argv: Pointer<JSValue>,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(constructor_or_func::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface f_f {
            public fun invoke(`$p0`: Double): Double

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(f_f::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_DOUBLE,
                    ValueLayout.JAVA_DOUBLE,
                )
            }
        }

        public fun interface f_f_f {
            public fun invoke(`$p0`: Double, `$p1`: Double): Double

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(f_f_f::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_DOUBLE,
                    ValueLayout.JAVA_DOUBLE,
                    ValueLayout.JAVA_DOUBLE,
                )
            }
        }

        public fun interface getter {
            public fun invoke(ctx: Pointer<JSContext>, this_val: JSValue): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(getter::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                )
            }
        }

        public fun interface setter {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                `val`: JSValue,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(setter::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_LONG,
                )
            }
        }

        public fun interface getter_magic {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                magic: Int,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(getter_magic::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface setter_magic {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                `val`: JSValue,
                magic: Int,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(setter_magic::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface iterator_next {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_val: JSValue,
                argc: Int,
                argv: Pointer<JSValue>,
                pdone: Pointer<Int>,
                magic: Int,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(iterator_next::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_INT,
                )
            }
        }
    }
}
