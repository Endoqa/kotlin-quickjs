// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class JSSharedArrayBufferFunctions(
    public val `$mem`: MemorySegment,
) {
    public var sab_alloc: Pointer<(opaque: Pointer<Unit>, size: ULong) -> Pointer<Unit>>
        get() = sab_allocHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            sab_allocHandle.set(this.`$mem`, 0L, value)
        }

    public var sab_free: Pointer<(opaque: Pointer<Unit>, ptr: Pointer<Unit>) -> Unit>
        get() = sab_freeHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            sab_freeHandle.set(this.`$mem`, 0L, value)
        }

    public var sab_dup: Pointer<(opaque: Pointer<Unit>, ptr: Pointer<Unit>) -> Unit>
        get() = sab_dupHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            sab_dupHandle.set(this.`$mem`, 0L, value)
        }

    public var sab_opaque: Pointer<Unit>
        get() = sab_opaqueHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            sab_opaqueHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("sab_alloc"),
            `$RuntimeHelper`.POINTER.withName("sab_free"),
            `$RuntimeHelper`.POINTER.withName("sab_dup"),
            `$RuntimeHelper`.POINTER.withName("sab_opaque"),
        ).withName("JSSharedArrayBufferFunctions")

        @JvmField
        public val sab_allocHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sab_alloc"))

        @JvmField
        public val sab_freeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sab_free"))

        @JvmField
        public val sab_dupHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sab_dup"))

        @JvmField
        public val sab_opaqueHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sab_opaque"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSSharedArrayBufferFunctions =
            JSSharedArrayBufferFunctions(alloc.allocate(layout))

        public fun interface sab_alloc {
            public fun invoke(opaque: Pointer<Unit>, size: ULong): Pointer<Unit>

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(sab_alloc::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                )
            }
        }

        public fun interface sab_free {
            public fun invoke(opaque: Pointer<Unit>, ptr: Pointer<Unit>)

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(sab_free::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface sab_dup {
            public fun invoke(opaque: Pointer<Unit>, ptr: Pointer<Unit>)

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(sab_dup::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
