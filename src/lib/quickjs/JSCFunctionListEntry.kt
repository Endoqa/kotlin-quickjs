// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class JSCFunctionListEntry(
    public val `$mem`: MemorySegment,
) {
    public var name: Pointer<Byte>
        get() = nameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nameHandle.set(this.`$mem`, 0L, value)
        }

    public var prop_flags: uint8_t
        get() = (prop_flagsHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            prop_flagsHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public var def_type: uint8_t
        get() = (def_typeHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            def_typeHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public var magic: int16_t
        get() = magicHandle.get(this.`$mem`, 0L) as Short
        set(`value`) {
            magicHandle.set(this.`$mem`, 0L, value)
        }

    public var u: JSCFunctionListEntry_field_u
        get() = JSCFunctionListEntry_field_u(
            uHandle.invokeExact(this.`$mem`, 0L)
                    as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.u.`$mem`, 0L,
                JSCFunctionListEntry_field_u.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("name"),
            ValueLayout.JAVA_BYTE.withName("prop_flags"),
            ValueLayout.JAVA_BYTE.withName("def_type"),
            ValueLayout.JAVA_SHORT.withName("magic"),
            MemoryLayout.paddingLayout(4),
            JSCFunctionListEntry_field_u.layout.withName("u"),
        ).withName("JSCFunctionListEntry")

        @JvmField
        public val nameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("name"))

        @JvmField
        public val prop_flagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("prop_flags"))

        @JvmField
        public val def_typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("def_type"))

        @JvmField
        public val magicHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("magic"))

        @JvmField
        public val uHandle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("u"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSCFunctionListEntry =
            JSCFunctionListEntry(alloc.allocate(layout))
    }
}
