// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class JSClassExoticMethods(
    public val `$mem`: MemorySegment,
) {
    public var get_own_property: Pointer<(
        ctx: Pointer<JSContext>,
        desc: Pointer<JSPropertyDescriptor>,
        obj: JSValue,
        prop: JSAtom,
    ) -> Int>
        get() = get_own_propertyHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            get_own_propertyHandle.set(this.`$mem`, 0L, value)
        }

    public var get_own_property_names: Pointer<(
        ctx: Pointer<JSContext>,
        ptab: Pointer<Pointer<JSPropertyEnum>>,
        plen: Pointer<uint32_t>,
        obj: JSValue,
    ) -> Int>
        get() = get_own_property_namesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            get_own_property_namesHandle.set(this.`$mem`, 0L, value)
        }

    public var delete_property: Pointer<(
        ctx: Pointer<JSContext>,
        obj: JSValue,
        prop: JSAtom,
    ) -> Int>
        get() = delete_propertyHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            delete_propertyHandle.set(this.`$mem`, 0L, value)
        }

    public var define_own_property: Pointer<(
        ctx: Pointer<JSContext>,
        this_obj: JSValue,
        prop: JSAtom,
        `val`: JSValue,
        getter: JSValue,
        setter: JSValue,
        flags: Int,
    ) -> Int>
        get() = define_own_propertyHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            define_own_propertyHandle.set(this.`$mem`, 0L, value)
        }

    public var has_property: Pointer<(
        ctx: Pointer<JSContext>,
        obj: JSValue,
        atom: JSAtom,
    ) -> Int>
        get() = has_propertyHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            has_propertyHandle.set(this.`$mem`, 0L, value)
        }

    public var get_property: Pointer<(
        ctx: Pointer<JSContext>,
        obj: JSValue,
        atom: JSAtom,
        `receiver`: JSValue,
    ) -> JSValue>
        get() = get_propertyHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            get_propertyHandle.set(this.`$mem`, 0L, value)
        }

    public var set_property: Pointer<(
        ctx: Pointer<JSContext>,
        obj: JSValue,
        atom: JSAtom,
        `value`: JSValue,
        `receiver`: JSValue,
        flags: Int,
    ) -> Int>
        get() = set_propertyHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            set_propertyHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("get_own_property"),
            `$RuntimeHelper`.POINTER.withName("get_own_property_names"),
            `$RuntimeHelper`.POINTER.withName("delete_property"),
            `$RuntimeHelper`.POINTER.withName("define_own_property"),
            `$RuntimeHelper`.POINTER.withName("has_property"),
            `$RuntimeHelper`.POINTER.withName("get_property"),
            `$RuntimeHelper`.POINTER.withName("set_property"),
        ).withName("JSClassExoticMethods")

        @JvmField
        public val get_own_propertyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("get_own_property"))

        @JvmField
        public val get_own_property_namesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("get_own_property_names"))

        @JvmField
        public val delete_propertyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("delete_property"))

        @JvmField
        public val define_own_propertyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("define_own_property"))

        @JvmField
        public val has_propertyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("has_property"))

        @JvmField
        public val get_propertyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("get_property"))

        @JvmField
        public val set_propertyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("set_property"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSClassExoticMethods =
            JSClassExoticMethods(alloc.allocate(layout))

        public fun interface get_own_property {
            public fun invoke(
                ctx: Pointer<JSContext>,
                desc: Pointer<JSPropertyDescriptor>,
                obj: JSValue,
                prop: JSAtom,
            ): Int

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(get_own_property::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface get_own_property_names {
            public fun invoke(
                ctx: Pointer<JSContext>,
                ptab: Pointer<Pointer<JSPropertyEnum>>,
                plen: Pointer<uint32_t>,
                obj: JSValue,
            ): Int

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(get_own_property_names::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                )
            }
        }

        public fun interface delete_property {
            public fun invoke(
                ctx: Pointer<JSContext>,
                obj: JSValue,
                prop: JSAtom,
            ): Int

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(delete_property::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface define_own_property {
            public fun invoke(
                ctx: Pointer<JSContext>,
                this_obj: JSValue,
                prop: JSAtom,
                `val`: JSValue,
                getter: JSValue,
                setter: JSValue,
                flags: Int,
            ): Int

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(define_own_property::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface has_property {
            public fun invoke(
                ctx: Pointer<JSContext>,
                obj: JSValue,
                atom: JSAtom,
            ): Int

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(has_property::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                )
            }
        }

        public fun interface get_property {
            public fun invoke(
                ctx: Pointer<JSContext>,
                obj: JSValue,
                atom: JSAtom,
                `receiver`: JSValue,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(get_property::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    ValueLayout.JAVA_LONG,
                )
            }
        }

        public fun interface set_property {
            public fun invoke(
                ctx: Pointer<JSContext>,
                obj: JSValue,
                atom: JSAtom,
                `value`: JSValue,
                `receiver`: JSValue,
                flags: Int,
            ): Int

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(set_property::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                )
            }
        }
    }
}
