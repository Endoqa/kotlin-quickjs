// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class JSCFunctionListGetSetEntry(
    public val `$mem`: MemorySegment,
) {
    public var `get`: JSCFunctionType
        get() = JSCFunctionType(
            getHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.`get`.`$mem`, 0L, JSCFunctionType.layout.byteSize())
        }

    public var `set`: JSCFunctionType
        get() = JSCFunctionType(
            setHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.`set`.`$mem`, 0L, JSCFunctionType.layout.byteSize())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            JSCFunctionType.layout.withName("get"),
            JSCFunctionType.layout.withName("set"),
        ).withName("JSCFunctionListGetSetEntry")

        @JvmField
        public val getHandle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("get"))

        @JvmField
        public val setHandle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("set"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSCFunctionListGetSetEntry =
            JSCFunctionListGetSetEntry(alloc.allocate(layout))
    }
}
