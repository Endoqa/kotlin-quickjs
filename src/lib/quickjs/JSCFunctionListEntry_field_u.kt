// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class JSCFunctionListEntry_field_u(
    public val `$mem`: MemorySegment,
) {
    public var func: JSCFunctionListFuncEntry
        get() =
            JSCFunctionListFuncEntry(
                funcHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.func.`$mem`, 0L,
                JSCFunctionListFuncEntry.layout.byteSize()
            )
        }

    public var getset: JSCFunctionListGetSetEntry
        get() =
            JSCFunctionListGetSetEntry(
                getsetHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.getset.`$mem`, 0L,
                JSCFunctionListGetSetEntry.layout.byteSize()
            )
        }

    public var alias: JSCFunctionListAliasEntry
        get() =
            JSCFunctionListAliasEntry(
                aliasHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.alias.`$mem`, 0L,
                JSCFunctionListAliasEntry.layout.byteSize()
            )
        }

    public var prop_list: JSCFunctionListPropListEntry
        get() =
            JSCFunctionListPropListEntry(
                prop_listHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.prop_list.`$mem`, 0L,
                JSCFunctionListPropListEntry.layout.byteSize()
            )
        }

    public var str: Pointer<Byte>
        get() = strHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            strHandle.set(this.`$mem`, 0L, value)
        }

    public var i32: int32_t
        get() = i32Handle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            i32Handle.set(this.`$mem`, 0L, value)
        }

    public var i64: int64_t
        get() = i64Handle.get(this.`$mem`, 0L) as Long
        set(`value`) {
            i64Handle.set(this.`$mem`, 0L, value)
        }

    public var f64: Double
        get() = f64Handle.get(this.`$mem`, 0L) as Double
        set(`value`) {
            f64Handle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            JSCFunctionListFuncEntry.layout.withName("func"),
            JSCFunctionListGetSetEntry.layout.withName("getset"),
            JSCFunctionListAliasEntry.layout.withName("alias"),
            JSCFunctionListPropListEntry.layout.withName("prop_list"),
            `$RuntimeHelper`.POINTER.withName("str"),
            ValueLayout.JAVA_INT.withName("i32"),
            ValueLayout.JAVA_LONG.withName("i64"),
            ValueLayout.JAVA_DOUBLE.withName("f64"),
        ).withName("JSCFunctionListEntry_field_u")

        @JvmField
        public val funcHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("func"))

        @JvmField
        public val getsetHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("getset"))

        @JvmField
        public val aliasHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("alias"))

        @JvmField
        public val prop_listHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("prop_list"))

        @JvmField
        public val strHandle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("str"))

        @JvmField
        public val i32Handle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("i32"))

        @JvmField
        public val i64Handle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("i64"))

        @JvmField
        public val f64Handle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("f64"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSCFunctionListEntry_field_u =
            JSCFunctionListEntry_field_u(alloc.allocate(layout))
    }
}
