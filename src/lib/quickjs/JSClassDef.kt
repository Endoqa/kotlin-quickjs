// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.quickjs

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class JSClassDef(
    public val `$mem`: MemorySegment,
) {
    public var class_name: Pointer<Byte>
        get() = class_nameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            class_nameHandle.set(this.`$mem`, 0L, value)
        }

    public var finalizer: Pointer<JSClassFinalizer>
        get() = finalizerHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            finalizerHandle.set(this.`$mem`, 0L, value)
        }

    public var gc_mark: Pointer<JSClassGCMark>
        get() = gc_markHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            gc_markHandle.set(this.`$mem`, 0L, value)
        }

    public var call: Pointer<JSClassCall>
        get() = callHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            callHandle.set(this.`$mem`, 0L, value)
        }

    public var exotic: Pointer<JSClassExoticMethods>
        get() = exoticHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            exoticHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("class_name"),
            `$RuntimeHelper`.POINTER.withName("finalizer"),
            `$RuntimeHelper`.POINTER.withName("gc_mark"),
            `$RuntimeHelper`.POINTER.withName("call"),
            `$RuntimeHelper`.POINTER.withName("exotic"),
        ).withName("JSClassDef")

        @JvmField
        public val class_nameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("class_name"))

        @JvmField
        public val finalizerHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("finalizer"))

        @JvmField
        public val gc_markHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("gc_mark"))

        @JvmField
        public val callHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("call"))

        @JvmField
        public val exoticHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("exotic"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): JSClassDef =
            JSClassDef(alloc.allocate(layout))

        public fun interface finalizer {
            public fun invoke(rt: Pointer<JSRuntime>, `val`: JSValue)

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(finalizer::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                )
            }
        }

        public fun interface gc_mark {
            public fun invoke(
                rt: Pointer<JSRuntime>,
                `val`: JSValue,
                mark_func: Pointer<JS_MarkFunc>,
            )

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(gc_mark::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface call {
            public fun invoke(
                ctx: Pointer<JSContext>,
                func_obj: JSValue,
                this_val: JSValue,
                argc: Int,
                argv: Pointer<JSValue>,
                flags: Int,
            ): JSValue

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(call::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_LONG,
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_INT,
                )
            }
        }
    }
}
